_1:
	MOV AX,5
	MOV DS:[_c], AX

    _a dw 0
    _b dw 0
    _fa dw 0
    _c dw 0
    _n dw 0
    _y dw 0
    _m dw 0
_2:
	MOV AX,0
	MOV a[0], AX
_3:
	MOV AX,2
	MOV a[1], AX
_4:
	MOV AX,0
	MOV a[2], AX
_5:
	MOV AX,0
	MOV DS:[_y], AX
_6:
	MOV AX,0
	MOV aa[0], AX
_7:
	MOV AX,0
	MOV aa[1], AX
_8:
	MOV AX,0
	MOV aa[2], AX
_9:
	MOV AX,0
	MOV aa[3], AX
_10:
	MOV AX,0
	MOV aaa[0], AX
_11:
	MOV AX,0
	MOV aaa[1], AX
_12:
	MOV AX,0
	MOV aaa[2], AX
_13:
	MOV AX,0
	MOV aaa[3], AX
_14:
	MOV AX,1
	MOV aab[0], AX
_15:
	MOV AX,2
	MOV aab[1], AX
_16:
	MOV AX,3
	MOV aab[2], AX
assume cs:code,ds:data,ss:stack,es:extended
extended segment
    db 1024 dup (0)
extended ends
stack segment
    db 1024 dup (0)
stack ends
data segment
    _buff_p db 256 dup (24h)
    _buff_s db 256 dup (0)
    _msg_p db 0ah,'Output:',0
    _msg_s db 0ah,'Input:',0
data ends
code segment
start:	mov ax,extended
    mov es,ax
    mov ax,stack
    mov ss,ax
    mov sp,1024
    mov bp,sp
    mov ax,data
    mov ds,ax
_18:
	MOV AX,1
	MOV k[0], AX
_19:
	MOV AX,2
	MOV k[1], AX
_20:
	MOV AX,6
	MOV k[2], AX
_21:
	MOV AX,9
	MOV k[3], AX
_22:
	MOV AX,5
	MOV k[4], AX
_23:
	MOV AX,6
	MOV k[5], AX
_24:
	MOV AX,DS:[_a]
	MOV k[35], AX
_25:
	MOV AX,DS:[_a]
	MOV k[21], AX
_26:
	MOV DX,1
	MOV AX,DS:[_m]
	CMP AX,1
	JNA _26_n
	MOV DX,0
_26_n:MOV DS:[42],DX
_27:
	MOV AX,DS:[42]
	CMP AX,0
	JNE _27_n
	JMP far ptr _29
_27_n:NOP
_28:
	MOV AX,1
	MOV DS:[_fa], AX
_29:
	JMP far ptr _34
_30:
	MOV AX,DS:[_m]
	SUB AX,1
	MOV DS:[26],AX;
_31:
	MOV AX,DS:[26]
	PUSH AX
_32:
	CALL _factor
	MOV ES:[0],AX
_33:
	MOV AX,DS:[_m]
	MOV BX,DS:[36]
	MUL BX
	MOV DS:[44],AX
_34:
	MOV AX,DS:[44]
	MOV DS:[_fa], AX
_35:
	MOV DX,1
	MOV AX,DS:[_m]
	CMP AX,10
	JB _35_n
	MOV DX,0
_35_n:MOV DS:[40],DX
_36:
	MOV AX,DS:[40]
	CMP AX,0
	JNE _36_n
	JMP far ptr _37
_36_n:NOP
_37:
	MOV AX,10
	MOV DS:[_n], AX
_38:
	MOV DX,1
	MOV AX,DS:[_m]
	CMP AX,10
	JB _38_n
	MOV DX,0
_38_n:MOV DS:[4],DX
_39:
	MOV AX,DS:[4]
	CMP AX,0
	JNE _39_n
	JMP far ptr _41
_39_n:NOP
_40:
	MOV AX,10
	MOV DS:[_n], AX
_41:
	JMP far ptr _46
_42:
	MOV DX,1
	MOV AX,DS:[_a]
	CMP AX,0
	JA _42_n
	MOV DX,0
_42_n:MOV DS:[18],DX
_43:
	MOV AX,DS:[18]
	CMP AX,0
	JNE _43_n
	JMP far ptr _45
_43_n:NOP
_44:
	MOV AX,11
	MOV DS:[_n], AX
_45:
	JMP far ptr _46
_46:
	MOV AX,12
	MOV DS:[_n], AX
_47:
	MOV AX,11
	MOV DS:[_n], AX
_48:
	MOV DX,1
	MOV AX,DS:[_a]
	CMP AX,10
	JA _48_n
	MOV DX,0
_48_n:MOV DS:[32],DX
_49:
	MOV AX,DS:[32]
	CMP AX,0
	JE _49_n
	JMP far ptr _46
_49_n:NOP
_50:
	MOV AX,1
	MOV DS:[_a], AX
_51:
	MOV AX,2
	MOV DS:[_a], AX
_52:
	MOV AX,a=2
	CMP AX,0
	JNE _52_n
	JMP far ptr _61
_52_n:NOP
_53:
	JMP far ptr _55
_54:
	MOV AX,3
	MOV DS:[_a], AX
_55:
	JMP far ptr _50
_56:
	MOV AX,5
	MOV BX,3
	MUL BX
	MOV DS:[34],AX
_57:
	MOV AX,6
	ADD AX,DS:[34]
	MOV DS:[28],AX;
_58:
	MOV AX,DS:[28]
	MOV DS:[_n], AX
_59:
	JMP far ptr _61
_60:
	JMP far ptr _53
_61:
	JMP far ptr _53
_62:
	MOV DX,1
	MOV AX,DS:[_c]
	CMP AX,0
	JA _62_n
	MOV DX,0
_62_n:MOV DS:[10],DX
_63:
	MOV AX,DS:[10]
	CMP AX,0
	JNE _63_n
	JMP far ptr _70
_63_n:NOP
_64:
	MOV DX,1
	MOV AX,DS:[_b]
	CMP AX,0
	JB _64_n
	MOV DX,0
_64_n:MOV DS:[260],DX
_65:
	MOV AX,DS:[260]
	CMP AX,0
	JE _65_n
	JMP far ptr _67
_65_n:NOP
_66:
	MOV DX,1
	MOV AX,DS:[_c]
	CMP AX,0
	JNE _66_n
	MOV DX,0
_66_n:MOV DS:[8],DX
_67:
	MOV AX,DS:[8]
	CMP AX,0
	JNE _67_n
	JMP far ptr _70
_67_n:NOP
_68:
	MOV AX,DS:[_a]
	ADD AX,DS:[_b]
	MOV DS:[2],AX;
_69:
	MOV AX,DS:[2]
	MOV DS:[_n], AX
_70:
	JMP far ptr _61
_71:
	MOV AX,6
	MOV DS:[_a], AX
_72:
	MOV AX,3
	PUSH AX
_73:
	CALL _sum
	MOV ES:[2],AX
_74:
	MOV AX,DS:[46]
	MOV DS:[_a], AX
_75:
	MOV AX,5
	ADD AX,6
	MOV DS:[12],AX;
_76:
	MOV AX,3
	MOV BX,DS:[12]
	MUL BX
	MOV DS:[20],AX
_77:
	MOV AX,DS:[20]
	MOV DX,0
	MOV BX,9
	DIV BX
	MOV DS:[14],AX
_78:
	MOV AX,5
	SUB AX,3
	MOV DS:[6],AX;
_79:
	MOV AX,DS:[14]
	MOV DX,0
	MOV BX,DS:[6]
	DIV BX
	MOV DS:[24],DX
_80:
	MOV AX,DS:[24]
	MOV DS:[_a], AX
_81:
	MOV DX,1
	MOV AX,DS:[_a]
	CMP AX,6
	JNE _81_n
	MOV DX,0
_81_n:MOV DS:[22],DX
_82:
	MOV AX,DS:[22]
	MOV DS:[_a], AX
QUIT: MOV AH, 4CH
	int 21h
_sum2:
	PUSH BP
	MOV BP,SP
	SUB SP,2
_85:
	MOV AX,0
	MOV SP,BP
	POP BP
	RET
_86:
	MOV SP,BP
	POP BP
	RET
_factor:
	PUSH BP
	MOV BP,SP
	SUB SP,2
_88:
	MOV AX,2
	MOV BX,5
	MUL BX
	MOV DS:[16],AX
_89:
	MOV AX,DS:[16]
	ADD AX,6
	MOV DS:[38],AX;
_90:
	MOV AX,DS:[38]
	MOV SP,BP
	POP BP
	RET
_91:
	MOV SP,BP
	POP BP
	RET
_sum:
	PUSH BP
	MOV BP,SP
	SUB SP,2
_93:
	MOV AX,0
	MOV SP,BP
	POP BP
	RET
_94:
	MOV SP,BP
	POP BP
	RET
_read:	push bp
	mov bp,sp
	mov bx,offset _msg_s
	call _print
	mov bx,offset _buff_s
	mov di,0
_r_lp_1:	mov ah,1
	int 21h
	cmp al,0dh
	je _r_brk_1
	mov ds:[bx+di],al
	inc di
	jmp short _r_lp_1
_r_brk_1:	mov ah,2
	mov dl,0ah
	int 21h
	mov ax,0
	mov si,0
	mov cx,10
_r_lp_2:	mov dl,ds:[bx+si]
	cmp dl,30h
	jb _r_brk_2
	cmp dl,39h
	ja _r_brk_2
	sub dl,30h
	mov ds:[bx+si],dl
	mul cx
	mov dl,ds:[bx+si]
	mov dh,0
	add ax,dx
	inc si
	jmp short _r_lp_2
_r_brk_2:	mov cx,di
	mov si,0
_r_lp_3:	mov byte ptr ds:[bx+si],0
	loop _r_lp_3
	mov sp,bp
	pop bp
	ret

_write:	push bp
	mov bp,sp
	mov bx,offset _msg_p
	call _print
	mov ax,ss:[bp+4]
	mov bx,10
	mov cx,0
_w_lp_1:	mov dx,0
	div bx
	push dx
	inc cx
	cmp ax,0
	jne _w_lp_1
	mov di ,offset _buff_p
_w_lp_2:	pop ax
	add ax,30h
	mov ds:[di],al
	inc di
	loop _w_lp_2
	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,di
	sub cx,offset _buff_p
	mov di,offset _buff_p
_w_lp_3:	mov al,24h
	mov ds:[di],al
	inc di
	loop _w_lp_3
	mov ax,di
	sub ax,offset _buff_p
	mov sp,bp
	pop bp
	ret 2
_print:	mov si,0
	mov di,offset _buff_p
_p_lp_1:	mov al,ds:[bx+si]
	cmp al,0
	je _p_brk_1
	mov ds:[di],al
	inc si
	inc di
	jmp short _p_lp_1
_p_brk_1:	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,si
	mov di,offset _buff_p
_p_lp_2:	mov al,24h
	mov ds:[di],al
	inc di
	loop _p_lp_2
	ret
code ends
end start